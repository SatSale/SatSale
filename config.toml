# SatSale Config :: Configure payment nodes and SatSale settings
payment_methods = ["bitcoind"]
# SatSale can connect to your own bitcoin/lnd/clightning node, with the correct connection details set in this config.
# Otherwise, you can just use `payment_method=['xpub']` with an `xpub=...` (found in your wallet) to derive onchain addresses.

## BITCOIND :: Add "bitcoind" to payment_methods and from ~/.bitcoin/bitcoin.conf
# use either username / password pair or rpc_cookie_file
# wallet (empty "" if your bitcoind node has a single wallet, OR wallet name/path as shown in `bitcoin-cli listwallets`)
[bitcoind]
host = "127.0.0.1"
# Use this instead of host to connect over Tor
#tor_bitcoinrpc_host = ""
username = "bitcoinrpc"
password = ""
rpcport = "8332"
#rpc_cookie_file =
wallet = ""

## XPUB :: Add "xpub" to payment_methods and enter your xpub below.
# You should strongly consider running a node and using it to verify payments rather than trusting block explorers.
# You MUST ensure you manually confirm the first address matches what you expect in your wallet! See output.
[xpub]
xpub = ""
# Supported derivations:
#   BIP44 - 1egacy addresses, xpub...
#   BIP84 - native segwit addresses (bc1q...), xpub... or zpub...
#   BIP86 - taproot (bc1p...), xpub...
bip = "BIP84"
#api_url = "https://mempool.space/api"

## LND :: Add "lnd" to payment_methods
# You can display your node connection so users can open channels with you by setting
# node_info="uri" (manually) or true (fetch if macaroon has access to `getinfo`)
[lnd]
host = "127.0.0.1"
lnd_dir = "~/.lnd/"
lnd_rpcport = "10009"
lnd_macaroon = "invoice.macaroon"
#lightning_address = None #e.g "name@your.satsale.domain" (point your domain w HTTPS, see /docs)
#lightning_address_comment = None # Defaults to: "Thank you for your support <3"

## CLIGHTNING :: Add "clightning" to payment_methods
# If remote clightning, make sure `ssh -nNT -L {local_lightning-rpc}:{remote_lightning-rpc} {tunnel_host} -p {tunnel_port}`
# creates a lightning-rpc unix domain socket. (use full paths local: /home/install/satsale/lightning-rpc)
# You can display your node connection so users can open channels with you by setting
# node_info="uri" (manually) or true (fetch if macaroon has access to `getinfo`)
[clightning]
clightning_rpc_file = "/home/user/.lightning/bitcoin/lightning-rpc"
#lightning_address = None #e.g "name@your.satsale.domain" (point your domain w HTTPS, see /docs)
#lightning_address_comment = None # Defaults to: "Thank you for your support <3"

## LNDHUB :: Use BlueWallet (LNDHub) backend for Lightning Network payments
# To get username / password, look at Wallet Export / Backup in Blue Wallet,
# it will have URL in format lndhub://bw_login:bw_password@backend_url
[lndhub]
bw_login = ""
bw_password = ""
backend_url = ""

[satsale]
#### Connect To Remote Node ####
# Either SSH or TOR should be used to 
# to tunnel/relay communications to the remote node

# SSH tunnel to node (recommended)
# Make sure this command works `ssh HOST@IP -q -N -L 8332:localhost:8332 -p PORT`
# Leave host="127.0.0.1" and you will be able to see your node as if it were local
#tunnel_host = "HOST@IP"
#tunnel_port = "PORT"  #defaults to 22, if left blank

# TOR hidden service to node (see docs for how to set up), 
# Currently only works for bitcoind. 
# Set `tor_bitcoinrpc_host="http://if...dwr.onion"` in bitcoind section above:
# A tor proxy, tor default 127.0.0.1:9050 (alongside Tor Browser use "127.0.0.1:9150")
#tor_proxy = "127.0.0.1:9050"

## !! Once up to here, you should now test your node configuration !!


# SatSale API key will be stored in this file
api_key_path = "SatSale_API_key"

# Dust limit for onchain payments in BTC. Don't generate onchain invoices
# below this value.
onchain_dust_limit = 0.00000546

# Upper limit for LN payments in BTC. Don't generate Lightning invoices above
# this value.
ln_upper_limit = 0.10000000

# You can display your node uri so users can open channels with you by setting
# node_info="uri" (manually) or true (use `admin.macaroon` to fetch `getinfo`)
#node_info = "uri"

# Check for payment every xx seconds
pollrate = 1

# Payment expires after xx seconds
payment_timeout = 3600

# Required confirmations for a payment
required_confirmations = 2

# Global connection attempts (Note: SatSale has 60s breaks after the 5th attempt)
# If you're getting worker timeouts, try launch with a long `--timeout`.
connection_attempts = 15

# Console log level (DEBUG, INFO, WARNING, ERROR)
loglevel = "DEBUG"

# This can be set to store name or whatever. Will be used as a prefix
# for invoice ids.
store_name = "SatSale"

# Generic redirect url after payment
redirect = "https://github.com/nickfarrow/satsale"

# Currency and exchange rate provider
supported_currencies = ["BTC"]          # Currencies to display on donation dropdown
base_currency = "sats"                  # Selection default for that dropdown
currency_provider = "COINGECKO"         # Supported: COINDESK | COINGECKO

# Multiplier added on top of BTC / fiat exchange rate. Allows to give discount or add extra commission.
# Values above 1.00 gives discount, values below add extra comission.
bitcoin_rate_multiplier = 1.00

# BTC amount allowed to be underpaid to consider invoice paid.
# It's recommended to keep it at least 0.00000001 BTC currently,
# due to https://github.com/SatSale/SatSale/issues/77 bug.
allowed_underpay_amount = 0.00000001

# Weak Hands Mode - Automatically swap LN-BTC -> L-USDT using sideshift.ai
# https://blockstream.com/liquid/
# Change lnd_macaroon='admin.macaroon', as you will also need to be able to spend with your lnd certificates.
# This is NOT a trustless swap. Exchange is carried out using sideshift.ai, you bear all associated exchange risks.
#liquid_address = ""

# Paynym - Display your paynym on your SatSale donation page
#paynym = "+royalcell593"

# DO NOT CHANGE THIS TO TRUE UNLESS YOU WANT ALL PAYMENTS TO AUTOMATICALLY
# BE CONSIDERED AS PAID.
free_mode = false
